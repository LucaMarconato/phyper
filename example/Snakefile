from config import instances, Instance
from paths import get_preprocessed_dataset_path, get_torch_model_path, get_training_metrics_path

instance_hashes = [instance.get_instance_hash() for instance in instances]

rule _preprocess_data:
    # output: expand('derived_data/all/{instance_hash}/torch_model_epoch.torch', instance_hash=instance_hashes)
    output:Instance.snakemake_helper_get_wildcarded_path(get_preprocessed_dataset_path, instances[0], resource_name='preprocessed_data')
    # run:
    #     shell('python -m main preprocess-data {wildcards.preprocessed_data_hash}')
    shell:
         "python -m main preprocess-data --instance-hash {wildcards.preprocessed_data_hash}"

rule _train_nn:
    input:lambda wildcards: get_preprocessed_dataset_path(Instance.get_instance_from_hash(wildcards.hash, instances))
    # output: lambda wildcards: get_torch_model_path(Instance.get_instance_from_hash(wildcards.instance_hash, instances))
    # output: 'derived_data/all/{instance_hash}/torch_model_epoch.torch'
    output: Instance.snakemake_helper_get_wildcarded_path(get_torch_model_path, instances[0])
    shell:
         "python -m main train-model --instance-hash {wildcards.hash}"

rule preprocess_data:
    input: expand(rules._preprocess_data.output, preprocessed_data_hash=Instance.get_instances_hashes(instances))

rule train_nn:
    input: expand(rules._train_nn.output, hash=Instance.get_instances_hashes(instances))
